#!/usr/bin/env python3
"""Trigger puppet agent runs."""
import argparse
import os
import re
import socket
import subprocess
import sys
from textwrap import dedent


def log(*args, file=sys.stderr, **kwargs):
    print(*args, file=file, **kwargs)
    file.flush()


def trigger_run():
    if subprocess.call(
            ('/usr/sbin/service', 'puppet', 'status'),
            stdout=subprocess.DEVNULL,
    ) == 0:
        with open('/var/run/puppet/agent.pid') as f:
            pid = f.read().strip()

        if subprocess.call(('kill', '-USR1', pid)) != 0:
            log('Error triggering puppet run, are you root?')
            sys.exit(1)
    else:
        log('Error: Puppet agent does not appear to be running')
        sys.exit(1)


def tail_syslog():
    # call less in "secure" mode since this is triggered by passwordless sudo
    os.environ['LESSSECURE'] = '1'
    os.execvp('less', ('less', '+F', '/var/log/syslog'))


def switch_to_environment(env):
    log('Switching environment to "{}".'.format(env))

    hostname = socket.gethostname()
    ldif = dedent(
        '''\
        dn: cn={hostname},ou=Hosts,dc=OCF,dc=Berkeley,dc=EDU
        changetype: modify
        replace: environment
        environment: {environment}''',
    ).format(
        hostname=hostname,
        environment=env,
    )

    # TODO: use subprocess.run on python3.5; we don't actually care about stdout here
    subprocess.check_output(
        (
            'kinit',
            '-t', '/etc/krb5.keytab',
            'host/{}.ocf.berkeley.edu@OCF.BERKELEY.EDU'.format(hostname),
            'ldapmodify',
        ),
        input=ldif.encode('utf8'),
    )


def validate_environment(environment):
    if not re.match(r'[a-zA-Z_\-0-9]+$', environment):
        raise ValueError('environment has weird characters')
    else:
        return environment


def main(argv=None):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '-e', '--environment', type=validate_environment,
        help='switch to environment before running',
    )
    parser.add_argument(
        '-f', '--tail', action='store_true',
        help='tail syslog after trigger',
    )

    args = parser.parse_args(argv)

    if args.environment:
        switch_to_environment(args.environment)

    trigger_run()

    if args.tail:
        tail_syslog()


if __name__ == '__main__':
    exit(main())
